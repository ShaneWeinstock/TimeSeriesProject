upperLimitPoints
## ARMA Training
ensARMA= tswge::fore.aruma.wge(ensTrain$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead = nrow(ensTrain2),lastn = F)
ensARMAPred  = ensARMA$f
## VAR Training
ensVAR= VAR(ensTrain,p=6,type='trend',season=3,exogen=NULL)
ensVARPred =  predict(ensVAR,n.ahead=nrow(ensTrain2))$fcst$attritionRate[,1]
## Plotting Predictions
plot(1:nrow(ensTrain2),ensTrain2$attritionRate, type='l',lwd=2)
lines(1:nrow(ensTrain2),ensARMAPred,col='red')
lines(1:nrow(ensTrain2),ensVARPred,col='blue')
## Ensemble Training
set.seed(1701)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=100
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
#prediction from ARMA
ensARMATestPred = tswge::fore.aruma.wge(XTrain$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =TestSize,lastn = F)$f
#prediction from VAR
ensVARTest= VAR(XTrain,p=6,type='trend',season=3,exogen=NULL)
ensVARTestPred =  predict(ensVAR,n.ahead=nrow(XTest))$fcst$attritionRate[,1]
#prediction from Ensemble
ensTest=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA = c(ensARMAPred, ensARMATestPred)
,VAR =  c(ensVARPred, ensVARTestPred)))
#ARMA =  ts(c(ensARMAPred, ensARMATestPred),start=min(time(tsensTrain2)),frequency=12)
#,VAR =  ts(c(ensVARPred, ensVARTestPred),start=min(time(tsensTrain2)),frequency=12)))
plot(XTest$attritionRate,type='l',ylim =c(0,0.011))
lines(seq(1,TestSize),ensTest$mean,col='red')
ensASE = mean((tsTest[,'attritionRate'] - ensTest$mean)^2)
ensASE
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
## Ensemble Training
set.seed(1701)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=50
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
#prediction from ARMA
ensARMATestPred = tswge::fore.aruma.wge(XTrain$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =TestSize,lastn = F)$f
#prediction from VAR
ensVARTest= VAR(XTrain,p=6,type='trend',season=3,exogen=NULL)
ensVARTestPred =  predict(ensVAR,n.ahead=nrow(XTest))$fcst$attritionRate[,1]
#prediction from Ensemble
ensTest=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA = c(ensARMAPred, ensARMATestPred)
,VAR =  c(ensVARPred, ensVARTestPred)))
#ARMA =  ts(c(ensARMAPred, ensARMATestPred),start=min(time(tsensTrain2)),frequency=12)
#,VAR =  ts(c(ensVARPred, ensVARTestPred),start=min(time(tsensTrain2)),frequency=12)))
plot(XTest$attritionRate,type='l',ylim =c(0,0.011))
lines(seq(1,TestSize),ensTest$mean,col='red')
ensASE = mean((tsTest[,'attritionRate'] - ensTest$mean)^2)
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
vars::VARselect(XTrain, lag.max = 6, type = 'trend',season = 3, exogen = NULL)
XTrain
vars::VARselect(XTrain, lag.max = 10, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 6, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 7, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 8, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 10, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 2, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 1:2, type = 'both',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 6, type = 'const',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 8, type = 'none',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 8, type = 'trend',season = 3, exogen = NULL)
XTrain
vars::VARselect(XTrain, lag.max = 10, type = 'trend',season = 3, exogen = NULL)
varFit=VAR(XTrain,p=8,type='trend',season=3,exogen=NULL)
varFit=VAR(XTrain,p=10,type='trend',season=3,exogen=NULL)
summary(varFit$varresult$attritionRate)
AIC(varFit)
varPred = predict(varFit,n.ahead=TestSize)$fcst$attritionRate[,1]
varDataPred = cbind(dataTot,pred=NA)
varDataPred[(nrow(varDataPred)-TestSize+1):nrow(varDataPred),]$pred = varPred
ggplot(data=varDataPred,aes(x=timeID,y=attritionRate)) +
geom_line() +
geom_line(aes(y=pred),color='red')
varASE = ase(varPred,tail(dataTot,TestSize)$attritionRate)
varASE
tsTrain = ts(XTrain,start=c(2010,1),frequency = 12)
tsTest = ts(XTest,start=c(2018,10),frequency = 12)
tsAll =   ts(rbind(XTrain,XTest),start=c(2010,1),frequency = 12)
set.seed(1701)
library(nnfor)
nnFit = nnfor::mlp(y=tsTrain[,'attritionRate'],reps=20
,xreg = data.frame(tsAll[,colnames(tsAll) != 'attritionRate'])
,difforder = c(1,3),hd.auto.type = 'cv',hd=NULL,lags=1:6)
#https://www.analyticsvidhya.com/blog/2018/06/comprehensive-guide-for-ensemble-models/
ensTrain = head(XTrain,nrow(XTrain)*2/3)
ensTrain2  = tail(XTrain,nrow(XTrain)*1/3)
## ARMA Training
ensARMA= tswge::fore.aruma.wge(ensTrain$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead = nrow(ensTrain2),lastn = F)
ensARMAPred  = ensARMA$f
## VAR Training
ensVAR= VAR(ensTrain,p=6,type='trend',season=3,exogen=NULL)
ensVARPred =  predict(ensVAR,n.ahead=nrow(ensTrain2))$fcst$attritionRate[,1]
## Plotting Predictions
plot(1:nrow(ensTrain2),ensTrain2$attritionRate, type='l',lwd=2)
lines(1:nrow(ensTrain2),ensARMAPred,col='red')
lines(1:nrow(ensTrain2),ensVARPred,col='blue')
## Ensemble Training
set.seed(1701)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=50
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
#prediction from ARMA
ensARMATestPred = tswge::fore.aruma.wge(XTrain$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =TestSize,lastn = F)$f
#prediction from VAR
ensVARTest= VAR(XTrain,p=6,type='trend',season=3,exogen=NULL)
ensVARTestPred =  predict(ensVAR,n.ahead=nrow(XTest))$fcst$attritionRate[,1]
#prediction from Ensemble
ensTest=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA = c(ensARMAPred, ensARMATestPred)
,VAR =  c(ensVARPred, ensVARTestPred)))
#ARMA =  ts(c(ensARMAPred, ensARMATestPred),start=min(time(tsensTrain2)),frequency=12)
#,VAR =  ts(c(ensVARPred, ensVARTestPred),start=min(time(tsensTrain2)),frequency=12)))
plot(XTest$attritionRate,type='l',ylim =c(0,0.011))
lines(seq(1,TestSize),ensTest$mean,col='red')
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
## Ensemble Training
set.seed(1701)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=100
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
## Ensemble Training
set.seed(33)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=100
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
## Ensemble Training
set.seed(33)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=70
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
## Ensemble Training
set.seed(33)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=50
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
## Ensemble Training
set.seed(1701)
tsensTrain2 = tail(tsTrain,nrow(ensTrain2))
ensFit = nnfor::mlp(y=tsensTrain2[,'attritionRate'],reps=40
,xreg = data.frame(ARMA = ts(ensARMAPred,start=min(time(tsensTrain2)),frequency=12)
,VAR = ts(ensVARPred,start=min(time(tsensTrain2)),frequency=12) )
,difforder = NULL,hd.auto.type = 'cv',hd=NULL,lags=NULL)
ensFit
plot(ensFit)
horizon = 12
#prediction from ARMA
ensARMAFuturePred = tswge::fore.aruma.wge(X$attritionRate
,phi = es$phi,theta = es$theta,s=s
,n.ahead =horizon,lastn = F,plot=F)$f
#prediction from VAR
ensVARFuture = VAR(X,p=6,type='trend',season=3,exogen=NULL)
ensVARFuturePred =  predict(ensVARFuture,n.ahead=horizon)$fcst$attritionRate[,1]
#ensamble model
#prediction from Ensemble
ensFuture=forecast(ensFit,h=TestSize,xreg =data.frame(
ARMA =  c(ensARMAPred, ensARMAFuturePred)
,VAR =  c(ensVARPred, ensVARFuturePred))
,level=0.95)
#plot(ensFuture)
reps <- dim(ensFuture$all.mean)[2]
ts.plot(tsTrain[,'attritionRate'], ensFuture$all.mean, ensFuture$mean, col = c('black',rep("grey",reps), "blue"), lwd = c(1,rep(1, reps), 2))
#showLast = 50
#plot(tail(X$attritionRate,showLast),type='l',xlim=c(1,showLast+horizon))
#lines((showLast+1):(horizon + showLast),ensFuture$mean,col='red')
#lines((showLast+1):(horizon + showLast),ensFuture$low,col='red')
ensFuture$mean
vars::VARselect(XTrain, lag.max = 12, type = 'trend',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 13, type = 'trend',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 12, type = 'trend',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 14, type = 'trend',season = 3, exogen = NULL)
vars::VARselect(XTrain, lag.max = 7, type = 'trend',season = 3, exogen = NULL)
varFit=VAR(XTrain,p=6,type='trend',season=3,exogen=NULL)
summary(varFit$varresult$attritionRate)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(tswge)
aseWindowed = function(x,phi=0,theta=0,s=0,d=0,horizon,trainingSize=NULL,numASEs = NULL,plot = F){
# horizon = width of each prediction window
# trainingSize = width of the training windows. If this is not provided, it will be calculated based on the numASEs parameter
# numASEs = number of windows to use. If provided, it is used to calculate the trainingSize
# all other parameters follows the paramteres of the tswge::fore.aruma.wfe function
#
library(ggplot2)
n=length(x)
if(!is.null(numASEs))  {trainingSize = n  - horizon +1 -numASEs }
if(is.null(trainingSize)) {message("Missing numASEs or Training Size");return(NULL)}
#calculating windows
windows=1:(n-(trainingSize + horizon) + 1)
#function to caluclate the windows (sapply is faster and more efficient than for loop)
ASEOut = sapply(windows,function(i){
#calculating the current window parameters
winStart = i
winEnd = (i+(trainingSize-1))
horStart = winEnd+1
horEnd = horStart + horizon-1
#calculating the forecasts with the  aruma function
f = tswge::fore.aruma.wge(x[winStart:winEnd],phi = phi, theta = theta, s = s, d = d
,n.ahead = horizon,plot=F)
#calculating the ASE for current windows
ASE = mean((x[horStart:horEnd] - f$f)^2)
#storing data for the Ploy
plotData = data.frame(windowNum = rep(i,horizon), forecast = f$f,time = horStart:horEnd)
return(list(ASE=ASE,plotData=plotData))
})
#combining the output from the sapply in two variables
plotData= reduce(ASEOut['plotData',],rbind) #for the plot
ASEs = reduce(ASEOut['ASE',],c) #for calculating the mean ASE
#calculating the plot
p=ggplot2::ggplot(data=plotData,aes(x=time,y=forecast,group=windowNum,color=windowNum)) +
geom_line(alpha=0.5) +
geom_line(data=data.frame(x=x,t=1:length(x)),aes(x=t,y=x),inherit.aes = F,color='red') +
ggplot2::ylab('Values') +
ggplot2::ggtitle("Actual Value and Rolling Windows Forecasts")
if(plot)  plot(p)
#returning everyyhing as a list
return(list(ASEs = ASEs
,meanASE = mean(ASEs)
,windows = windows
,windowsSize = trainingSize
,plot=p
,plotData = plotData
))
}
data = readRDS('TO_cc_data.rds') %>%
filter(snap_fiscal_month_sort >= 201001
,snap_fiscal_month_sort <= 201909) %>%
rename(period = snap_fiscal_month_sort)  %>%
arrange(period)
data$timeID = group_indices(data,period)
# Summaries
getSummary = function(x){x %>%
summarise(separationsCount = sum(cnt_non_RIF_separations,na.rm=T)
,attritionRate = sum(cnt_non_RIF_separations,na.rm=T)/sum(headcount,na.rm=T)
,headcount = sum(headcount,na.rm=T)
,ageMeanYrs = sum(tot_age,na.rm=T)/sum(headcount,na.rm=T)/12
,tenureMeanYrs = sum(tot_tenure,na.rm=T)/sum(headcount,na.rm=T)/12
,recognitionEvents = sum(spot_events+points_events+star_events,na.rm=T)
,supervisorsCount = sum(cnt_spvs,na.rm=T)
,lowPerffCount = sum(tot_ppa_low,na.rm=T)
,highPerfCount = sum(tot_ppa_high,na.rm=T)
,timeID = max(timeID)
)
}
# summary by CC
#dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
#write_csv(dataCC,'byCostCenter.csv')
dataTot = data  %>%
group_by(period) %>%
getSummary() %>% ungroup()
#write_csv(dataTot,'byMonth.csv')
x=dataTot$attritionRate
tswge::plotts.wge(x)
#tswge::plotts.wge(dataTot$attritionRate)
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::scale_y_log10()
p=tswge::plotts.sample.wge(head(x,length(x)/2))
p=tswge::plotts.sample.wge(tail(x,length(x)/2))
p=tswge::plotts.sample.wge(x)
tswge::factor.wge(phi=c(rep(0,5),1))
tswge::factor.wge(phi=c(rep(0,2),1))
e=tswge::est.ar.wge(x,p=10,type='burg')
xtr=tswge::artrans.wge(x,phi.tr=c(rep(0,2),1))
p=tswge::plotts.sample.wge(xtr)
aic5 = tswge::aic5.wge(xtr,p=0:5,q=0:3,type='aic')
bic5 = tswge::aic5.wge(xtr,p=0:5,q=0:3,type='bic')
pacf(xtr)
p=tswge::plotts.sample.wge(xtr)
p=3;q=2;s=3
es=tswge::est.arma.wge(xtr,p=p,q=q)
es$phi
if(p>1) tswge::factor.wge(phi=es$phi)
es$theta
if(q>1) tswge::factor.wge(phi=es$theta)
message('Variance: ',es$avar)
message('Mean: ',mean(x))
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m = tswge::fore.aruma.wge(x,phi = es$phi,theta = es$theta,s=s,n.ahead = 12,lastn = T)
ase = ase(m$f,x)
message("ASE is: ",ase)
ase1=ase
asew=aseWindowed(x,phi=es$phi,theta = es$theta,s=s,horizon=12,numASEs = 30)
asew$plot
message("MEan Windowed ASE:",asew$meanASE)
aseW1=asew$meanASE
m1 = tswge::fore.aruma.wge(x,phi = es$phi,theta = es$theta,s=s,n.ahead = 12,lastn = F)
p=4;q=2;s=3
es=tswge::est.arma.wge(xtr,p=p,q=q)
es[c('phi','theta','avar')]
es$phi
if(p>1) tswge::factor.wge(phi=es$phi)
es$theta
if(q>1) tswge::factor.wge(phi=es$theta)
message('Variance: ',es$avar)
message('Mean: ',mean(x))
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m = tswge::fore.aruma.wge(x,phi = es$phi,theta = es$theta,s=s,n.ahead = 12,lastn = T)
ase = ase(m$f,x)
message("ASE is: ",ase)
ase2=ase
asew=aseWindowed(x,phi=es$phi,theta = es$theta,s=s,horizon=12,numASEs = 30)
asew$plot
message("MEan Windowed ASE:",asew$meanASE)
aseW2=asew$meanASE
m1 = tswge::fore.aruma.wge(x,phi = es$phi,theta = es$theta,s=s,n.ahead = 12,lastn = F)
p=3;q=0;s=3
message("Finding p using MLE:")
esM=tswge::est.ar.wge(xtr,p=p,type='mle')
message("Finding p using BURG:")
esB=tswge::est.ar.wge(xtr,p=p,type='burg')
es=esM
es$phi
message('Variance: ',es$avar)
message('Mean: ',mean(x))
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m = tswge::fore.aruma.wge(x,phi = es$phi,s=s,n.ahead = 12,lastn = T)
ase = ase(m$f,x)
message("ASE is: ",ase)
ase3=ase
asew=aseWindowed(x,phi=es$phi,theta = 0,s=s,horizon=12,numASEs = 30)
asew$plot
message("MEan Windowed ASE:",asew$meanASE)
aseW3=asew$meanASE
m1 = tswge::fore.aruma.wge(x,phi = es$phi,s=s,n.ahead = 12,lastn = F)
