,meanASE = mean(ASEs)
,windows = windows
,windowsSize = trainingSize
,plot=p
,plotData = plotData
))
}
aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=12,numASEs = 31)
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=12,numASEs = 31)
ase1$plot
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=12,numASEs = 60)
ase1$plot
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=15,numASEs = 20)
ase1$plot
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=6,numASEs = 20)
ase1$plot
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=12,numASEs = 20)
ase1$plot
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=12,numASEs = 20)
ase1$plot
message("MEan Windowed ASE":ase1$meanASE)
message("MEan Windowed ASE",ase1$meanASE)
message("MEan Windowed ASE:",ase1$meanASE)
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=3,n.ahead = 12,lastn = T)
message("ASE is",ase(m1$f,x))
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=3,n.ahead = 6,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=6,numASEs = 20)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=3,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=3,n.ahead = 12,lastn = F)
tswge::aic5.wge(x)
pacf(x)
e1=tswge::est.arma.wge(x,p=1,q=1)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=3,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=3,n.ahead = 12,lastn = F)
e1=tswge::est.arma.wge(x,p=2,q=0)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
m2 = tswge::fore.aruma.wge(x,phi = e2$phi,theta = e2$theta,s=3,n.ahead = 12,lastn = T)
e2=tswge::est.arma.wge(x,p=2,q=0)
message("mean: ",mean(x))
e2[c('phi','theta','avar')]
e2=tswge::est.arma.wge(x,p=2,q=0)
message("mean: ",mean(x))
e2[c('phi','theta','avar')]
m2 = tswge::fore.aruma.wge(x,phi = e2$phi,theta = e2$theta,s=3,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m2$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=1,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m2 = tswge::fore.aruma.wge(x,phi = e2$phi,theta = e2$theta,s=3,n.ahead = 12,lastn = F)
e3=tswge::est.arma.wge(x,p=1,q=1)
message("mean: ",mean(x))
e3[c('phi','theta','avar')]
m3 = tswge::fore.aruma.wge(x,phi = e3$phi,theta = e3$theta,s=3,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m3$f,x))
m3 = tswge::fore.aruma.wge(x,phi = e3$phi,theta = e3$theta,s=3,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m3$f,x))
ase2=aseWindowed(x,phi=e2$phi,theta = e2$theta,s=3,horizon=6,numASEs = 12)
ase2$plot
message("MEan Windowed ASE:",ase1$meanASE)
ase2=aseWindowed(x,phi=e2$phi,theta = e2$theta,s=3,horizon=6,numASEs = 12)
ase2$plot
message("MEan Windowed ASE:",ase1$meanASE)
p=tswge::plotts.sample.wge(head(x,length(x)/2))
p=tswge::plotts.sample.wge(tail(x,length(x)/2))
p=tswge::plotts.sample.wge(x)
p=1;q=1;s=6
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
p=1;q=0;s=6
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
p=1;q=0;s=3
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=12,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = F)
p=0;q=1;s=3
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = F)
p=1;q=1;s=3
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 12)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
p=2;q=1;s=3
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(tswge)
data = readRDS('TO_cc_data.rds') %>%
filter(snap_fiscal_month_sort >= 201001
,snap_fiscal_month_sort <= 201909) %>%
rename(period = snap_fiscal_month_sort)  %>%
arrange(period)
data$timeID = group_indices(data,period)
# Summaries
getSummary = function(x){x %>%
summarise(separationsCount = sum(cnt_non_RIF_separations,na.rm=T)
,attritionRate = sum(cnt_non_RIF_separations,na.rm=T)/sum(headcount,na.rm=T)
,headcount = sum(headcount,na.rm=T)
,ageMeanYrs = sum(tot_age,na.rm=T)/sum(headcount,na.rm=T)/12
,tenureMeanYrs = sum(tot_tenure,na.rm=T)/sum(headcount,na.rm=T)/12
,recognitionEvents = sum(spot_events+points_events+star_events,na.rm=T)
,supervisorsCount = sum(cnt_spvs,na.rm=T)
,lowPerffCount = sum(tot_ppa_low,na.rm=T)
,highPerfCount = sum(tot_ppa_high,na.rm=T)
,timeID = max(timeID)
)
}
# summary by CC
#dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
#write_csv(dataCC,'byCostCenter.csv')
dataTot = data  %>%
group_by(period) %>%
getSummary() %>% ungroup()
write_csv(dataTot,'byMonth.csv')
x=dataTot$separationsCount
x=dataTot$attritionRate
tswge::plotts.wge(dataTot$separationsCount)
#tswge::plotts.wge(dataTot$attritionRate)
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=separationsCount) )+
ggplot2::geom_point(alpha=0.2)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red') +
ggplot2::scale_y_log10()
p=tswge::plotts.sample.wge(head(x,length(x)/2))
p=tswge::plotts.sample.wge(tail(x,length(x)/2))
xYear = (dataTot %>%
group_by(group  = ceiling(dplyr::row_number() / 6)) %>%
summarise(separationsCount = sum(separationsCount)))$separationsCount
p=tswge::plotts.sample.wge(xYear)
tswge::aic5.wge(x)
pacf(x)
tswge::plotts.wge(x)
#tswge::plotts.wge(dataTot$attritionRate)
x
tswge::plotts.wge(x)
#tswge::plotts.wge(dataTot$attritionRate)
.008*12
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=separationsCount) )+
ggplot2::geom_point(alpha=0.2)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red') +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red') +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.1)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red') +
ggplot2::scale_y_log10()
p=tswge::plotts.sample.wge(head(x,length(x)/2))
p=tswge::plotts.sample.wge(tail(x,length(x)/2))
p=tswge::plotts.sample.wge(head(x,length(x)/2))
p=tswge::plotts.sample.wge(tail(x,length(x)/2))
p=tswge::plotts.sample.wge(x)
xYear = (dataTot %>%
group_by(group  = ceiling(dplyr::row_number() / 6)) %>%
summarise(separationsCount = sum(separationsCount)))$attritionRate
p=tswge::plotts.sample.wge(xYear)
xYear = (dataTot %>%
group_by(group  = ceiling(dplyr::row_number() / 6)) %>%
summarise(separationsCount = sum(separationsCount)))$attritionRate
xYear
xYear = (dataTot %>%
group_by(group  = ceiling(dplyr::row_number() / 6)) %>%
summarise(attritionRate = sum(attritionRate)))$attritionRate
p=tswge::plotts.sample.wge(xYear)
tswge::aic5.wge(x)
pacf(x)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(tswge)
aseWindowed = function(x,phi=0,theta=0,s=0,d=0,horizon,trainingSize=NULL,numASEs = NULL,plot = F){
#
# horizon = width of each prediction window
# trainingSize = width of the training windows. If this is not provided, it will be calculated based on the numASEs parameter
# numASEs = number of windows to use. If provided, it is used to calculate the trainingSize
# all other parameters follows the paramteres of the tswge::fore.aruma.wfe function
#
library(ggplot2)
n=length(x)
if(!is.null(numASEs))  {trainingSize = n  - horizon +1 -numASEs }
if(is.null(trainingSize)) {message("Missing numASEs or Training Size");return(NULL)}
#calculating windows
windows=1:(n-(trainingSize + horizon) + 1)
#function to caluclate the windows (sapply is faster and more efficient than for loop)
ASEOut = sapply(windows,function(i){
#calculating the current window parameters
winStart = i
winEnd = (i+(trainingSize-1))
horStart = winEnd+1
horEnd = horStart + horizon-1
#calculating the forecasts with the  aruma function
f = tswge::fore.aruma.wge(x[winStart:winEnd],phi = phi, theta = theta, s = s, d = d
,n.ahead = horizon,plot=F)
#calculating the ASE for current windows
ASE = mean((x[horStart:horEnd] - f$f)^2)
#storing data for the Ploy
plotData = data.frame(windowNum = rep(i,horizon), forecast = f$f,time = horStart:horEnd)
return(list(ASE=ASE,plotData=plotData))
})
#combining the output from the sapply in two variables
plotData= reduce(ASEOut['plotData',],rbind) #for the plot
ASEs = reduce(ASEOut['ASE',],c) #for calculating the mean ASE
#calculating the plot
p=ggplot2::ggplot(data=plotData,aes(x=time,y=forecast,group=windowNum,color=windowNum)) +
geom_line() +
geom_line(data=data.frame(x=x,t=1:length(x)),aes(x=t,y=x),inherit.aes = F,color='red') +
ggplot2::ylab('Values') +
ggplot2::ggtitle("Actual Value and Rolling Windows Forecasts")
if(plot)  plot(p)
#returning everyyhing as a list
return(list(ASEs = ASEs
,meanASE = mean(ASEs)
,windows = windows
,windowsSize = trainingSize
,plot=p
,plotData = plotData
))
}
data = readRDS('TO_cc_data.rds') %>%
filter(snap_fiscal_month_sort >= 201001
,snap_fiscal_month_sort <= 201909) %>%
rename(period = snap_fiscal_month_sort)  %>%
arrange(period)
data$timeID = group_indices(data,period)
# Summaries
getSummary = function(x){x %>%
summarise(separationsCount = sum(cnt_non_RIF_separations,na.rm=T)
,attritionRate = sum(cnt_non_RIF_separations,na.rm=T)/sum(headcount,na.rm=T)
,headcount = sum(headcount,na.rm=T)
,ageMeanYrs = sum(tot_age,na.rm=T)/sum(headcount,na.rm=T)/12
,tenureMeanYrs = sum(tot_tenure,na.rm=T)/sum(headcount,na.rm=T)/12
,recognitionEvents = sum(spot_events+points_events+star_events,na.rm=T)
,supervisorsCount = sum(cnt_spvs,na.rm=T)
,lowPerffCount = sum(tot_ppa_low,na.rm=T)
,highPerfCount = sum(tot_ppa_high,na.rm=T)
,timeID = max(timeID)
)
}
# summary by CC
#dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
#write_csv(dataCC,'byCostCenter.csv')
dataTot = data  %>%
group_by(period) %>%
getSummary() %>% ungroup()
#write_csv(dataTot,'byMonth.csv')
x=dataTot$separationsCount
x=dataTot$attritionRate
tswge::plotts.wge(x)
#tswge::plotts.wge(dataTot$attritionRate)
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.1)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red') +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.1)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=2) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.1)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.1,type=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.1,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.3,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.3,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.y='sd',geom='line',color='green',size=1.2) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::geom_errorbar()+
#ggplot2::stat_summary(fun.y='sd',geom='line',color='green',size=1.2) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.y=meanse,geom='errorbar',color='green',size=1.2) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.y=mean_se,geom='errorbar',color='green',size=1.2) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.y='mean_se',geom='errorbar',color='green',size=1.2) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.data='mean_se',geom='errorbar',color='green',size=1.2) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.data='mean_se',geom='line',color='green',size=1.2) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.data='mean_cl_normal ',geom='errorbar',color='green',size=1.2,fun.args=list(mult=1)) +
ggplot2::scale_y_log10()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::stat_summary(fun.data='sd',geom='errorbar',color='green',size=1.2,fun.args=list(mult=1)) +
ggplot2::scale_y_log10()
dataCC = data %>%  group_by(period,cost_center) %>% getSummary()
ggplot2::ggplot(data=filter(dataCC), aes(x=timeID, y=attritionRate) )+
ggplot2::geom_point(alpha=0.2,shape=16)  +
ggplot2::stat_summary(fun.y='mean',geom='line',color='red',size=1.2) +
ggplot2::scale_y_log10()
p=tswge::plotts.sample.wge(head(x,length(x)/2))
p=tswge::plotts.sample.wge(tail(x,length(x)/2))
p=tswge::plotts.sample.wge(x)
xYear = (dataTot %>%
group_by(group  = ceiling(dplyr::row_number() / 6)) %>%
summarise(attritionRate = sum(attritionRate)))$attritionRate
p=tswge::plotts.sample.wge(xYear)
tswge::aic5.wge(x)
pacf(x)
tswge::aic5.wge(x,p=0:10,q=0:5)
pacf(x)
tswge::aic5.wge(x,p=0:10,q=0:5)
tswge::aic5.wge(x,p=0:10,q=0:5,type='bic')
pacf(x)
tswge::aic5.wge(x,p=0:6,q=0:2)
tswge::aic5.wge(x,p=0:6,q=0:2,type='bic')
pacf(x)
p=2;q=1;s=3
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",round(ase(m1$f,x),6)
message("ASE is: ",round(ase(m1$f,x),6))
message("ASE is: ",round(ase(m1$f,x),5))
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=12,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(tswge)
aseWindowed = function(x,phi=0,theta=0,s=0,d=0,horizon,trainingSize=NULL,numASEs = NULL,plot = F){
#
# horizon = width of each prediction window
# trainingSize = width of the training windows. If this is not provided, it will be calculated based on the numASEs parameter
# numASEs = number of windows to use. If provided, it is used to calculate the trainingSize
# all other parameters follows the paramteres of the tswge::fore.aruma.wfe function
#
library(ggplot2)
n=length(x)
if(!is.null(numASEs))  {trainingSize = n  - horizon +1 -numASEs }
if(is.null(trainingSize)) {message("Missing numASEs or Training Size");return(NULL)}
#calculating windows
windows=1:(n-(trainingSize + horizon) + 1)
#function to caluclate the windows (sapply is faster and more efficient than for loop)
ASEOut = sapply(windows,function(i){
#calculating the current window parameters
winStart = i
winEnd = (i+(trainingSize-1))
horStart = winEnd+1
horEnd = horStart + horizon-1
#calculating the forecasts with the  aruma function
f = tswge::fore.aruma.wge(x[winStart:winEnd],phi = phi, theta = theta, s = s, d = d
,n.ahead = horizon,plot=F)
#calculating the ASE for current windows
ASE = mean((x[horStart:horEnd] - f$f)^2)
#storing data for the Ploy
plotData = data.frame(windowNum = rep(i,horizon), forecast = f$f,time = horStart:horEnd)
return(list(ASE=ASE,plotData=plotData))
})
#combining the output from the sapply in two variables
plotData= reduce(ASEOut['plotData',],rbind) #for the plot
ASEs = reduce(ASEOut['ASE',],c) #for calculating the mean ASE
#calculating the plot
p=ggplot2::ggplot(data=plotData,aes(x=time,y=forecast,group=windowNum,color=windowNum)) +
geom_line(alpha=0.5) +
geom_line(data=data.frame(x=x,t=1:length(x)),aes(x=t,y=x),inherit.aes = F,color='red') +
ggplot2::ylab('Values') +
ggplot2::ggtitle("Actual Value and Rolling Windows Forecasts")
if(plot)  plot(p)
#returning everyyhing as a list
return(list(ASEs = ASEs
,meanASE = mean(ASEs)
,windows = windows
,windowsSize = trainingSize
,plot=p
,plotData = plotData
))
}
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=12,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = F)
p=1;q=0;s=3
e1=tswge::est.arma.wge(x,p=p,q=q)
message("mean: ",mean(x))
e1[c('phi','theta','avar')]
ase = function(f,x){mean((f - tail(x,length(f)))^2)}
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = T)
message("ASE is: ",ase(m1$f,x))
ase1=aseWindowed(x,phi=e1$phi,theta = e1$theta,s=s,horizon=6,numASEs = 30)
ase1$plot
message("MEan Windowed ASE:",ase1$meanASE)
aseW3=ase1$meanASE
m1 = tswge::fore.aruma.wge(x,phi = e1$phi,theta = e1$theta,s=s,n.ahead = 12,lastn = F)
ase1
base::sd
ase1
ase1=ase(m1$f,x)
ase1
